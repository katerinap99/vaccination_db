# Generated by Django 4.0 on 2022-01-01 14:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Citizen',
            fields=[
                ('amka', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=25)),
                ('date_of_birth', models.DateField()),
            ],
            options={
                'db_table': 'citizen',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('district_name', models.CharField(max_length=13, primary_key=True, serialize=False)),
                ('governor', models.CharField(max_length=25)),
                ('population', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'district',
            },
        ),
        migrations.CreateModel(
            name='HealthcareStaff',
            fields=[
                ('employee_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('medical_specialty', models.CharField(max_length=25)),
                ('amka', models.CharField(max_length=11, unique=True)),
                ('vaccine_received', models.CharField(max_length=15)),
            ],
            options={
                'db_table': 'healthcare_staff',
            },
        ),
        migrations.CreateModel(
            name='VaccinationSpot',
            fields=[
                ('vax_spot_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('capacity', models.PositiveIntegerField()),
                ('address', models.CharField(max_length=35)),
                ('type', models.CharField(max_length=22)),
                ('district_name', models.ForeignKey(db_column='district_name', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.district')),
            ],
            options={
                'db_table': 'vaccination_spot',
            },
        ),
        migrations.CreateModel(
            name='VaccineManufacturer',
            fields=[
                ('vaccine_name', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('vaccine_type', models.CharField(max_length=10)),
                ('production_capacity', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'vaccine_manufacturer',
            },
        ),
        migrations.CreateModel(
            name='Vaccine',
            fields=[
                ('vaccine_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('batch_id', models.CharField(max_length=11)),
                ('num_of_dose', models.PositiveIntegerField()),
                ('dosage', models.PositiveIntegerField()),
                ('vaccine_name', models.ForeignKey(db_column='vaccine_name', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.vaccinemanufacturer')),
                ('vax_spot', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.vaccinationspot')),
            ],
            options={
                'db_table': 'vaccine',
            },
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('vaccination_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('took_place', models.IntegerField()),
                ('amka', models.ForeignKey(db_column='amka', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.citizen')),
                ('vaccine', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.vaccine')),
                ('vax_spot', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.vaccinationspot')),
            ],
            options={
                'db_table': 'vaccination',
            },
        ),
        migrations.CreateModel(
            name='TestingSpot',
            fields=[
                ('testing_spot_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=35)),
                ('inventory', models.PositiveIntegerField()),
                ('type', models.CharField(max_length=8)),
                ('district_name', models.ForeignKey(db_column='district_name', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.district')),
            ],
            options={
                'db_table': 'testing_spot',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('test_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('result', models.CharField(max_length=8)),
                ('type', models.CharField(max_length=5)),
                ('date', models.DateField()),
                ('amka', models.ForeignKey(db_column='amka', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.citizen')),
                ('testing_spot', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.testingspot')),
            ],
            options={
                'db_table': 'test',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('certificate_id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('issue_date', models.DateField()),
                ('type', models.CharField(max_length=7)),
                ('amka', models.ForeignKey(db_column='amka', on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.citizen')),
            ],
            options={
                'db_table': 'certificate',
            },
        ),
        migrations.CreateModel(
            name='CitizenUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('amka', models.ForeignKey(db_column='amka', on_delete=django.db.models.deletion.CASCADE, to='vaccinationdb.citizen')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VaccinationSpotHasHealthcareStaff',
            fields=[
                ('vax_spot', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='vaccinationdb.vaccinationspot')),
                ('from_field', models.DateField(db_column='from')),
                ('to', models.DateField(blank=True, null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='vaccinationdb.healthcarestaff')),
            ],
            options={
                'db_table': 'vaccination_spot_has_healthcare_staff',
                'unique_together': {('vax_spot', 'employee')},
            },
        ),
    ]
